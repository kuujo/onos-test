/*
Copyright 2019-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package onos.test.simulation;

import "gogoproto/gogo.proto";
import "google/protobuf/duration.proto";

// SimulationLifecycleRequest is a simulation request
message SimulationLifecycleRequest {
    // simulation is the simulation name
    string simulation = 1;

    // args is the simulation arguments
    map<string, string> args = 2;
}

// SimulationLifecycleResponse is a response to a SimulationRequest
message SimulationLifecycleResponse {

}

// SimulationRequest is a request to run a simulation
message SimulationRequest {
    // simulation is the simulation name
    string simulation = 1;

    // rate is the rate at which to simulate operations
    google.protobuf.Duration rate = 2[(gogoproto.nullable) = false, (gogoproto.stdduration) = true];

    // jitter is the jitter to apply to the rate
    double jitter = 3;

    // args is the simulation arguments
    map<string, string> args = 4;
}

// SimulationResponse is a response indicating a simulation output
message SimulationResponse {
    // result is the simulation output
    bytes result = 1;

    // error is a simulation error
    string error = 2;
}

// SimulatorService is a simulation worker service
service SimulatorService {
    rpc SetupSimulation (SimulationLifecycleRequest) returns (SimulationLifecycleResponse);
    rpc TearDownSimulation (SimulationLifecycleRequest) returns (SimulationLifecycleResponse);
    rpc StartSimulation (SimulationRequest) returns (stream SimulationResponse);
    rpc StopSimulation (SimulationRequest) returns (SimulationResponse);
}
