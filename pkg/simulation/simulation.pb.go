// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: simulation/simulation.proto

package simulation

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SimulationLifecycleRequest is a simulation request
type SimulationLifecycleRequest struct {
	// simulation is the simulation name
	Simulation string `protobuf:"bytes,1,opt,name=simulation,proto3" json:"simulation,omitempty"`
	// args is the simulation arguments
	Args map[string]string `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *SimulationLifecycleRequest) Reset()         { *m = SimulationLifecycleRequest{} }
func (m *SimulationLifecycleRequest) String() string { return proto.CompactTextString(m) }
func (*SimulationLifecycleRequest) ProtoMessage()    {}
func (*SimulationLifecycleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e12b66aec6c312, []int{0}
}
func (m *SimulationLifecycleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimulationLifecycleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimulationLifecycleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimulationLifecycleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimulationLifecycleRequest.Merge(m, src)
}
func (m *SimulationLifecycleRequest) XXX_Size() int {
	return m.Size()
}
func (m *SimulationLifecycleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SimulationLifecycleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SimulationLifecycleRequest proto.InternalMessageInfo

func (m *SimulationLifecycleRequest) GetSimulation() string {
	if m != nil {
		return m.Simulation
	}
	return ""
}

func (m *SimulationLifecycleRequest) GetArgs() map[string]string {
	if m != nil {
		return m.Args
	}
	return nil
}

// SimulationLifecycleResponse is a response to a SimulationRequest
type SimulationLifecycleResponse struct {
}

func (m *SimulationLifecycleResponse) Reset()         { *m = SimulationLifecycleResponse{} }
func (m *SimulationLifecycleResponse) String() string { return proto.CompactTextString(m) }
func (*SimulationLifecycleResponse) ProtoMessage()    {}
func (*SimulationLifecycleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e12b66aec6c312, []int{1}
}
func (m *SimulationLifecycleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimulationLifecycleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimulationLifecycleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimulationLifecycleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimulationLifecycleResponse.Merge(m, src)
}
func (m *SimulationLifecycleResponse) XXX_Size() int {
	return m.Size()
}
func (m *SimulationLifecycleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SimulationLifecycleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SimulationLifecycleResponse proto.InternalMessageInfo

// SimulationRequest is a request to run a simulation
type SimulationRequest struct {
	// simulation is the simulation name
	Simulation string `protobuf:"bytes,1,opt,name=simulation,proto3" json:"simulation,omitempty"`
	// rate is the rate at which to simulate operations
	Rate time.Duration `protobuf:"bytes,2,opt,name=rate,proto3,stdduration" json:"rate"`
	// jitter is the jitter to apply to the rate
	Jitter float64 `protobuf:"fixed64,3,opt,name=jitter,proto3" json:"jitter,omitempty"`
	// args is the simulation arguments
	Args map[string]string `protobuf:"bytes,4,rep,name=args,proto3" json:"args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *SimulationRequest) Reset()         { *m = SimulationRequest{} }
func (m *SimulationRequest) String() string { return proto.CompactTextString(m) }
func (*SimulationRequest) ProtoMessage()    {}
func (*SimulationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e12b66aec6c312, []int{2}
}
func (m *SimulationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimulationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimulationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimulationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimulationRequest.Merge(m, src)
}
func (m *SimulationRequest) XXX_Size() int {
	return m.Size()
}
func (m *SimulationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SimulationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SimulationRequest proto.InternalMessageInfo

func (m *SimulationRequest) GetSimulation() string {
	if m != nil {
		return m.Simulation
	}
	return ""
}

func (m *SimulationRequest) GetRate() time.Duration {
	if m != nil {
		return m.Rate
	}
	return 0
}

func (m *SimulationRequest) GetJitter() float64 {
	if m != nil {
		return m.Jitter
	}
	return 0
}

func (m *SimulationRequest) GetArgs() map[string]string {
	if m != nil {
		return m.Args
	}
	return nil
}

// SimulationResponse is a response indicating a simulation output
type SimulationResponse struct {
	// result is the simulation output
	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	// error is a simulation error
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *SimulationResponse) Reset()         { *m = SimulationResponse{} }
func (m *SimulationResponse) String() string { return proto.CompactTextString(m) }
func (*SimulationResponse) ProtoMessage()    {}
func (*SimulationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17e12b66aec6c312, []int{3}
}
func (m *SimulationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimulationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimulationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimulationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimulationResponse.Merge(m, src)
}
func (m *SimulationResponse) XXX_Size() int {
	return m.Size()
}
func (m *SimulationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SimulationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SimulationResponse proto.InternalMessageInfo

func (m *SimulationResponse) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *SimulationResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*SimulationLifecycleRequest)(nil), "onos.test.simulation.SimulationLifecycleRequest")
	proto.RegisterMapType((map[string]string)(nil), "onos.test.simulation.SimulationLifecycleRequest.ArgsEntry")
	proto.RegisterType((*SimulationLifecycleResponse)(nil), "onos.test.simulation.SimulationLifecycleResponse")
	proto.RegisterType((*SimulationRequest)(nil), "onos.test.simulation.SimulationRequest")
	proto.RegisterMapType((map[string]string)(nil), "onos.test.simulation.SimulationRequest.ArgsEntry")
	proto.RegisterType((*SimulationResponse)(nil), "onos.test.simulation.SimulationResponse")
}

func init() { proto.RegisterFile("simulation/simulation.proto", fileDescriptor_17e12b66aec6c312) }

var fileDescriptor_17e12b66aec6c312 = []byte{
	// 430 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x92, 0xb1, 0x6e, 0xd4, 0x40,
	0x10, 0x86, 0xbd, 0xf6, 0x11, 0x91, 0x09, 0x22, 0x61, 0x75, 0x42, 0xc6, 0x11, 0x9b, 0xd3, 0x35,
	0xb8, 0x5a, 0x27, 0x47, 0x11, 0x94, 0x8e, 0x53, 0xd2, 0x21, 0x0a, 0x9b, 0x17, 0x70, 0xcc, 0x9c,
	0x65, 0x30, 0x5e, 0xb3, 0xbb, 0x3e, 0xe4, 0x9e, 0x07, 0xa0, 0xe4, 0x85, 0x90, 0x52, 0x46, 0x54,
	0x54, 0x80, 0xee, 0x5e, 0x04, 0x79, 0xed, 0xc4, 0x2e, 0x82, 0x92, 0x48, 0x90, 0x6e, 0xfe, 0xd9,
	0xd9, 0xef, 0x1f, 0xff, 0x5e, 0xd8, 0x55, 0xd9, 0x87, 0x2a, 0x8f, 0x75, 0x26, 0x8a, 0xa0, 0x2f,
	0x79, 0x29, 0x85, 0x16, 0x74, 0x2c, 0x0a, 0xa1, 0xb8, 0x46, 0xa5, 0x79, 0x7f, 0xe6, 0x8d, 0x53,
	0x91, 0x0a, 0x33, 0x10, 0x34, 0x55, 0x3b, 0xeb, 0xb1, 0x54, 0x88, 0x34, 0xc7, 0xc0, 0xa8, 0xd3,
	0x6a, 0x11, 0xbc, 0xad, 0xe4, 0x80, 0x35, 0xfd, 0x46, 0xc0, 0x8b, 0x2e, 0x21, 0xaf, 0xb2, 0x05,
	0x26, 0x75, 0x92, 0x63, 0x88, 0x1f, 0x2b, 0x54, 0x9a, 0x32, 0x80, 0xde, 0xc2, 0x25, 0x13, 0xe2,
	0x6f, 0x86, 0x83, 0x0e, 0x7d, 0x0d, 0xa3, 0x58, 0xa6, 0xca, 0xb5, 0x27, 0x8e, 0xbf, 0x35, 0x3b,
	0xe2, 0x57, 0x6d, 0xc6, 0xff, 0xce, 0xe7, 0x2f, 0x65, 0xaa, 0x4e, 0x0a, 0x2d, 0xeb, 0xd0, 0x70,
	0xbc, 0x43, 0xd8, 0xbc, 0x6c, 0xd1, 0x1d, 0x70, 0xde, 0x63, 0xdd, 0xb9, 0x36, 0x25, 0x1d, 0xc3,
	0xbd, 0x65, 0x9c, 0x57, 0xe8, 0xda, 0xa6, 0xd7, 0x8a, 0x23, 0xfb, 0x05, 0x99, 0x3e, 0x85, 0xdd,
	0x2b, 0x6d, 0x54, 0x29, 0x0a, 0x85, 0xd3, 0xcf, 0x36, 0x3c, 0xea, 0xcf, 0x6f, 0xfa, 0x75, 0x87,
	0x30, 0x92, 0xb1, 0x6e, 0xdd, 0xb6, 0x66, 0x4f, 0x78, 0x9b, 0x25, 0xbf, 0xc8, 0x92, 0x1f, 0x77,
	0x59, 0xce, 0xef, 0x9f, 0xfd, 0xdc, 0xb3, 0xbe, 0xfe, 0xda, 0x23, 0xa1, 0xb9, 0x40, 0x1f, 0xc3,
	0xc6, 0xbb, 0x4c, 0x6b, 0x94, 0xae, 0x33, 0x21, 0x3e, 0x09, 0x3b, 0x45, 0x4f, 0xba, 0xb8, 0x46,
	0x26, 0xae, 0x83, 0xeb, 0xe2, 0xfa, 0xe7, 0x29, 0xcd, 0x81, 0x0e, 0xe9, 0x6d, 0x38, 0xcd, 0xb6,
	0x12, 0x55, 0x95, 0x6b, 0x03, 0x79, 0x10, 0x76, 0xaa, 0xe1, 0xa0, 0x94, 0x42, 0x5e, 0x70, 0x8c,
	0x98, 0x7d, 0x77, 0x60, 0xa7, 0x83, 0x08, 0x19, 0xa1, 0x5c, 0x66, 0x09, 0xd2, 0x25, 0x6c, 0x47,
	0xa8, 0xab, 0xb2, 0xa7, 0xd3, 0xfd, 0xdb, 0x3e, 0x06, 0xef, 0xe0, 0x16, 0x37, 0xba, 0xd5, 0x6b,
	0xa0, 0x6f, 0x30, 0x96, 0xc7, 0xe2, 0x53, 0x71, 0xd7, 0xd6, 0x0b, 0xd8, 0x8e, 0x74, 0x2c, 0xf5,
	0xc0, 0xf7, 0xd9, 0x0d, 0x7f, 0xa8, 0xe7, 0x5f, 0x3f, 0xd8, 0xba, 0xec, 0x13, 0x9a, 0xc0, 0xc3,
	0x48, 0x8b, 0xf2, 0xbf, 0xda, 0xcc, 0xdd, 0xb3, 0x15, 0x23, 0xe7, 0x2b, 0x46, 0x7e, 0xaf, 0x18,
	0xf9, 0xb2, 0x66, 0xd6, 0xf9, 0x9a, 0x59, 0x3f, 0xd6, 0xcc, 0x3a, 0xdd, 0x30, 0xaf, 0xfd, 0xf9,
	0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc8, 0x2b, 0xd8, 0xef, 0x92, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SimulatorServiceClient is the client API for SimulatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SimulatorServiceClient interface {
	SetupSimulation(ctx context.Context, in *SimulationLifecycleRequest, opts ...grpc.CallOption) (*SimulationLifecycleResponse, error)
	TearDownSimulation(ctx context.Context, in *SimulationLifecycleRequest, opts ...grpc.CallOption) (*SimulationLifecycleResponse, error)
	StartSimulation(ctx context.Context, in *SimulationRequest, opts ...grpc.CallOption) (SimulatorService_StartSimulationClient, error)
	StopSimulation(ctx context.Context, in *SimulationRequest, opts ...grpc.CallOption) (*SimulationResponse, error)
}

type simulatorServiceClient struct {
	cc *grpc.ClientConn
}

func NewSimulatorServiceClient(cc *grpc.ClientConn) SimulatorServiceClient {
	return &simulatorServiceClient{cc}
}

func (c *simulatorServiceClient) SetupSimulation(ctx context.Context, in *SimulationLifecycleRequest, opts ...grpc.CallOption) (*SimulationLifecycleResponse, error) {
	out := new(SimulationLifecycleResponse)
	err := c.cc.Invoke(ctx, "/onos.test.simulation.SimulatorService/SetupSimulation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simulatorServiceClient) TearDownSimulation(ctx context.Context, in *SimulationLifecycleRequest, opts ...grpc.CallOption) (*SimulationLifecycleResponse, error) {
	out := new(SimulationLifecycleResponse)
	err := c.cc.Invoke(ctx, "/onos.test.simulation.SimulatorService/TearDownSimulation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simulatorServiceClient) StartSimulation(ctx context.Context, in *SimulationRequest, opts ...grpc.CallOption) (SimulatorService_StartSimulationClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SimulatorService_serviceDesc.Streams[0], "/onos.test.simulation.SimulatorService/StartSimulation", opts...)
	if err != nil {
		return nil, err
	}
	x := &simulatorServiceStartSimulationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SimulatorService_StartSimulationClient interface {
	Recv() (*SimulationResponse, error)
	grpc.ClientStream
}

type simulatorServiceStartSimulationClient struct {
	grpc.ClientStream
}

func (x *simulatorServiceStartSimulationClient) Recv() (*SimulationResponse, error) {
	m := new(SimulationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *simulatorServiceClient) StopSimulation(ctx context.Context, in *SimulationRequest, opts ...grpc.CallOption) (*SimulationResponse, error) {
	out := new(SimulationResponse)
	err := c.cc.Invoke(ctx, "/onos.test.simulation.SimulatorService/StopSimulation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SimulatorServiceServer is the server API for SimulatorService service.
type SimulatorServiceServer interface {
	SetupSimulation(context.Context, *SimulationLifecycleRequest) (*SimulationLifecycleResponse, error)
	TearDownSimulation(context.Context, *SimulationLifecycleRequest) (*SimulationLifecycleResponse, error)
	StartSimulation(*SimulationRequest, SimulatorService_StartSimulationServer) error
	StopSimulation(context.Context, *SimulationRequest) (*SimulationResponse, error)
}

// UnimplementedSimulatorServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSimulatorServiceServer struct {
}

func (*UnimplementedSimulatorServiceServer) SetupSimulation(ctx context.Context, req *SimulationLifecycleRequest) (*SimulationLifecycleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetupSimulation not implemented")
}
func (*UnimplementedSimulatorServiceServer) TearDownSimulation(ctx context.Context, req *SimulationLifecycleRequest) (*SimulationLifecycleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TearDownSimulation not implemented")
}
func (*UnimplementedSimulatorServiceServer) StartSimulation(req *SimulationRequest, srv SimulatorService_StartSimulationServer) error {
	return status.Errorf(codes.Unimplemented, "method StartSimulation not implemented")
}
func (*UnimplementedSimulatorServiceServer) StopSimulation(ctx context.Context, req *SimulationRequest) (*SimulationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopSimulation not implemented")
}

func RegisterSimulatorServiceServer(s *grpc.Server, srv SimulatorServiceServer) {
	s.RegisterService(&_SimulatorService_serviceDesc, srv)
}

func _SimulatorService_SetupSimulation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimulationLifecycleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulatorServiceServer).SetupSimulation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.test.simulation.SimulatorService/SetupSimulation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulatorServiceServer).SetupSimulation(ctx, req.(*SimulationLifecycleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimulatorService_TearDownSimulation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimulationLifecycleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulatorServiceServer).TearDownSimulation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.test.simulation.SimulatorService/TearDownSimulation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulatorServiceServer).TearDownSimulation(ctx, req.(*SimulationLifecycleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimulatorService_StartSimulation_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SimulationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SimulatorServiceServer).StartSimulation(m, &simulatorServiceStartSimulationServer{stream})
}

type SimulatorService_StartSimulationServer interface {
	Send(*SimulationResponse) error
	grpc.ServerStream
}

type simulatorServiceStartSimulationServer struct {
	grpc.ServerStream
}

func (x *simulatorServiceStartSimulationServer) Send(m *SimulationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SimulatorService_StopSimulation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimulationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulatorServiceServer).StopSimulation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.test.simulation.SimulatorService/StopSimulation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulatorServiceServer).StopSimulation(ctx, req.(*SimulationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SimulatorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "onos.test.simulation.SimulatorService",
	HandlerType: (*SimulatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetupSimulation",
			Handler:    _SimulatorService_SetupSimulation_Handler,
		},
		{
			MethodName: "TearDownSimulation",
			Handler:    _SimulatorService_TearDownSimulation_Handler,
		},
		{
			MethodName: "StopSimulation",
			Handler:    _SimulatorService_StopSimulation_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartSimulation",
			Handler:       _SimulatorService_StartSimulation_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "simulation/simulation.proto",
}

func (m *SimulationLifecycleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimulationLifecycleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimulationLifecycleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Args) > 0 {
		for k := range m.Args {
			v := m.Args[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintSimulation(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintSimulation(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintSimulation(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Simulation) > 0 {
		i -= len(m.Simulation)
		copy(dAtA[i:], m.Simulation)
		i = encodeVarintSimulation(dAtA, i, uint64(len(m.Simulation)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SimulationLifecycleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimulationLifecycleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimulationLifecycleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SimulationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimulationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimulationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Args) > 0 {
		for k := range m.Args {
			v := m.Args[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintSimulation(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintSimulation(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintSimulation(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Jitter != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Jitter))))
		i--
		dAtA[i] = 0x19
	}
	n1, err1 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.Rate, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.Rate):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintSimulation(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x12
	if len(m.Simulation) > 0 {
		i -= len(m.Simulation)
		copy(dAtA[i:], m.Simulation)
		i = encodeVarintSimulation(dAtA, i, uint64(len(m.Simulation)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SimulationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimulationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimulationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintSimulation(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintSimulation(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSimulation(dAtA []byte, offset int, v uint64) int {
	offset -= sovSimulation(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SimulationLifecycleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Simulation)
	if l > 0 {
		n += 1 + l + sovSimulation(uint64(l))
	}
	if len(m.Args) > 0 {
		for k, v := range m.Args {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovSimulation(uint64(len(k))) + 1 + len(v) + sovSimulation(uint64(len(v)))
			n += mapEntrySize + 1 + sovSimulation(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *SimulationLifecycleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SimulationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Simulation)
	if l > 0 {
		n += 1 + l + sovSimulation(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.Rate)
	n += 1 + l + sovSimulation(uint64(l))
	if m.Jitter != 0 {
		n += 9
	}
	if len(m.Args) > 0 {
		for k, v := range m.Args {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovSimulation(uint64(len(k))) + 1 + len(v) + sovSimulation(uint64(len(v)))
			n += mapEntrySize + 1 + sovSimulation(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *SimulationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovSimulation(uint64(l))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovSimulation(uint64(l))
	}
	return n
}

func sovSimulation(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSimulation(x uint64) (n int) {
	return sovSimulation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SimulationLifecycleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSimulation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimulationLifecycleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimulationLifecycleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Simulation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSimulation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSimulation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSimulation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Simulation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSimulation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSimulation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSimulation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Args == nil {
				m.Args = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSimulation
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSimulation
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthSimulation
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthSimulation
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSimulation
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthSimulation
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthSimulation
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSimulation(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSimulation
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Args[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSimulation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSimulation
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSimulation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimulationLifecycleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSimulation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimulationLifecycleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimulationLifecycleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSimulation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSimulation
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSimulation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimulationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSimulation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimulationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimulationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Simulation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSimulation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSimulation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSimulation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Simulation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSimulation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSimulation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSimulation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.Rate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jitter", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Jitter = float64(math.Float64frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSimulation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSimulation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSimulation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Args == nil {
				m.Args = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSimulation
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSimulation
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthSimulation
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthSimulation
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSimulation
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthSimulation
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthSimulation
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSimulation(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSimulation
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Args[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSimulation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSimulation
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSimulation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimulationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSimulation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimulationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimulationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSimulation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSimulation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSimulation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSimulation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSimulation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSimulation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSimulation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSimulation
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSimulation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSimulation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSimulation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSimulation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSimulation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSimulation
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSimulation
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSimulation
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSimulation        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSimulation          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSimulation = fmt.Errorf("proto: unexpected end of group")
)
